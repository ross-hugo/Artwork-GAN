{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Discriminator.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
   ],
   "source": [
    "# # !git clone https://github.com/ross-hugo/Artwork-GAN/\n",
    "# cd Artwork-GAN/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S4fsyVSiWYF0",
        "outputId": "bfec77dd-a2e9-43a9-c591-1e3e6c0a0c62"
      },
      "source": [
        "!git clone https://github.com/ross-hugo/Artwork-GAN/"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Cloning into 'Artwork-GAN'...\n",
            "remote: Enumerating objects: 8208, done.\u001b[K\n",
            "remote: Counting objects: 100% (8208/8208), done.\u001b[K\n",
            "remote: Compressing objects: 100% (8197/8197), done.\u001b[K\n",
            "remote: Total 8208 (delta 15), reused 8191 (delta 8), pack-reused 0\u001b[K\n",
            "Receiving objects: 100% (8208/8208), 35.51 MiB | 27.97 MiB/s, done.\n",
            "Resolving deltas: 100% (15/15), done.\n"
          ],
          "name": "stdout"
        }
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.chdir(\"..\")\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import sys\n",
    "import numpy as np\n",
    "from scipy import ndimage\n",
    "\n",
    "from src.generator import Generator\n",
    "from src.discriminator import Discriminator\n",
    "from src.sgan import SGAN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "BATCH_SIZE = 64"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "id": "xBmiqZVwtZwq"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "===== Discriminator Model Summary ======\n",
      "\n",
      "Model: \"sequential_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_11 (Conv2D)           (None, 64, 64, 32)        896       \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_8 (LeakyReLU)    (None, 64, 64, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_12 (Conv2D)           (None, 32, 32, 32)        9248      \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_9 (LeakyReLU)    (None, 32, 32, 32)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_13 (Conv2D)           (None, 16, 16, 64)        18496     \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_10 (LeakyReLU)   (None, 16, 16, 64)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_14 (Conv2D)           (None, 8, 8, 64)          36928     \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_11 (LeakyReLU)   (None, 8, 8, 64)          0         \n",
      "_________________________________________________________________\n",
      "conv2d_15 (Conv2D)           (None, 4, 4, 128)         73856     \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_12 (LeakyReLU)   (None, 4, 4, 128)         0         \n",
      "_________________________________________________________________\n",
      "conv2d_16 (Conv2D)           (None, 2, 2, 128)         147584    \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_13 (LeakyReLU)   (None, 2, 2, 128)         0         \n",
      "_________________________________________________________________\n",
      "conv2d_17 (Conv2D)           (None, 1, 1, 256)         295168    \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_14 (LeakyReLU)   (None, 1, 1, 256)         0         \n",
      "_________________________________________________________________\n",
      "conv2d_18 (Conv2D)           (None, 1, 1, 256)         590080    \n",
      "_________________________________________________________________\n",
      "leaky_re_lu_15 (LeakyReLU)   (None, 1, 1, 256)         0         \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 256)               0         \n",
      "=================================================================\n",
      "Total params: 1,172,256\n",
      "Trainable params: 1,172,256\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "\n",
      "\n",
      "===== Generator Model Summary ========\n",
      "\n",
      "Model: \"sequential_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_1 (Dense)              (None, 131072)            13238272  \n",
      "_________________________________________________________________\n",
      "reshape_1 (Reshape)          (None, 32, 32, 128)       0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_3 (Batch (None, 32, 32, 128)       512       \n",
      "_________________________________________________________________\n",
      "up_sampling2d_2 (UpSampling2 (None, 64, 64, 128)       0         \n",
      "_________________________________________________________________\n",
      "conv2d_19 (Conv2D)           (None, 64, 64, 128)       147584    \n",
      "_________________________________________________________________\n",
      "activation_3 (Activation)    (None, 64, 64, 128)       0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_4 (Batch (None, 64, 64, 128)       512       \n",
      "_________________________________________________________________\n",
      "up_sampling2d_3 (UpSampling2 (None, 128, 128, 128)     0         \n",
      "_________________________________________________________________\n",
      "conv2d_20 (Conv2D)           (None, 128, 128, 64)      73792     \n",
      "_________________________________________________________________\n",
      "activation_4 (Activation)    (None, 128, 128, 64)      0         \n",
      "_________________________________________________________________\n",
      "batch_normalization_5 (Batch (None, 128, 128, 64)      256       \n",
      "_________________________________________________________________\n",
      "conv2d_21 (Conv2D)           (None, 128, 128, 3)       1731      \n",
      "_________________________________________________________________\n",
      "activation_5 (Activation)    (None, 128, 128, 3)       0         \n",
      "=================================================================\n",
      "Total params: 13,462,659\n",
      "Trainable params: 13,462,019\n",
      "Non-trainable params: 640\n",
      "_________________________________________________________________\n",
      "<class 'tensorflow.python.keras.engine.keras_tensor.KerasTensor'>\n",
      "KerasTensor(type_spec=TensorSpec(shape=(None, 128, 128, 3), dtype=tf.float32, name=None), name='model_2/sequential_3/activation_5/Tanh:0', description=\"created by layer 'model_2'\")\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.engine.sequential.Sequential at 0x181caddf0>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gan = SGAN(verbosity=True)\n",
    "gan.discriminator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "gan.compile()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 8118 files belonging to 49 classes.\n",
      "Using 6495 files for training.\n",
      "Found 8118 files belonging to 49 classes.\n",
      "Using 1623 files for validation.\n"
     ]
    }
   ],
   "source": [
    "from tensorflow.keras.preprocessing import image_dataset_from_directory\n",
    "dir = \"images/\"\n",
    "\n",
    "#divide by two because discriminator is taking other half from generator\n",
    "train_ds = image_dataset_from_directory(dir,\n",
    "  validation_split=0.2, subset=\"training\",\n",
    "  seed=123,\n",
    "  labels=\"inferred\",label_mode=\"int\"\n",
    "  ,image_size=(128, 128), color_mode= \"rgb\",\n",
    "    batch_size=BATCH_SIZE//2)\n",
    "\n",
    "val_ds = image_dataset_from_directory(dir,\n",
    "  validation_split=0.2, subset=\"validation\",\n",
    "  seed=123,\n",
    "  labels=\"inferred\",label_mode=\"int\"\n",
    "  ,image_size=(128, 128), color_mode= \"rgb\",\n",
    "    batch_size=BATCH_SIZE//2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(10, 10))\n",
    "for images, labels in train_ds.take(1):\n",
    "  for i in range(9):\n",
    "      ax = plt.subplot(3, 3, i + 1)\n",
    "      plt.imshow(images[i].numpy().astype(\"uint8\"))\n",
    "      plt.title(int(labels[i]))\n",
    "      plt.axis(\"off\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9d12ae05b7ad4902a43e45b753132bc6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/100 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "gan.train(X=train_ds, y=val_ds, epochs=100, batch_size=64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "VjbQDWd1ApDn",
        "outputId": "0952ac82-424e-478f-d5f6-7c2edbc719ce"
      },
      "source": [
        "from keras.layers import Input, Dense, Reshape, Flatten, Dropout\n",
        "from keras.layers import BatchNormalization, Activation, ZeroPadding2D\n",
        "from keras.layers.advanced_activations import LeakyReLU\n",
        "from keras.layers.convolutional import UpSampling2D, Conv2D\n",
        "from keras.models import Sequential, Model\n",
        "from keras.optimizers import Adam\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import sys\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "class GAN():\n",
        "    def __init__(self):\n",
        "        self.img_rows = 128\n",
        "        self.img_cols = 128\n",
        "        self.channels = 3\n",
        "        self.img_shape = (self.img_rows, self.img_cols, self.channels)\n",
        "        self.latent_dim = 100\n",
        "\n",
        "        optimizer = Adam(0.0002, 0.5)\n",
        "\n",
        "        # Build and compile the discriminator\n",
        "        self.discriminator = self.build_discriminator()\n",
        "        self.discriminator.compile(loss='binary_crossentropy',\n",
        "            optimizer=optimizer,\n",
        "            metrics=['accuracy'])\n",
        "\n",
        "        # Build the generator\n",
        "        self.generator = self.build_generator()\n",
        "\n",
        "        # The generator takes noise as input and generates imgs\n",
        "        z = Input(shape=(self.latent_dim,))\n",
        "        img = self.generator(z)\n",
        "\n",
        "        # For the combined model we will only train the generator\n",
        "        self.discriminator.trainable = False\n",
        "\n",
        "        # The discriminator takes generated images as input and determines validity\n",
        "        validity = self.discriminator(img)\n",
        "\n",
        "        # The combined model  (stacked generator and discriminator)\n",
        "        # Trains the generator to fool the discriminator\n",
        "        self.combined = Model(z, validity)\n",
        "        self.combined.compile(loss='binary_crossentropy', optimizer=optimizer)\n",
        "\n",
        "\n",
        "    def build_generator(self):\n",
        "\n",
        "        model = Sequential()\n",
        "\n",
        "        model.add(Dense(256, input_dim=self.latent_dim))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(Dense(512))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(Dense(1024))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(BatchNormalization(momentum=0.8))\n",
        "        model.add(Dense(np.prod(self.img_shape), activation='tanh'))\n",
        "        model.add(Reshape(self.img_shape))\n",
        "\n",
        "        model.summary()\n",
        "\n",
        "        noise = Input(shape=(self.latent_dim,))\n",
        "        img = model(noise)\n",
        "\n",
        "        return Model(noise, img) #fake image\n",
        "\n",
        "\n",
        "    def build_discriminator(self): \n",
        "\n",
        "        model = Sequential()\n",
        "      \n",
        "        #block1\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Conv2D(32, kernel_size=3, strides=2, input_shape=self.img_shape, padding=\"same\"))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Conv2D(32, kernel_size=3, strides=2, padding=\"same\"))\n",
        "\n",
        "\n",
        "        #block2\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Conv2D(64, kernel_size=3, strides=2, padding=\"same\"))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Conv2D(64, kernel_size=3, strides=2, padding=\"same\"))\n",
        "        \n",
        "        #block3\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Conv2D(128, kernel_size=3, strides=2,  padding=\"same\"))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Conv2D(128, kernel_size=3, strides=2, padding=\"same\"))\n",
        "\n",
        "        #block4\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Conv2D(256, kernel_size=3, strides=2, padding=\"same\"))\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "        model.add(Conv2D(256, kernel_size=3, strides=2, padding=\"same\"))\n",
        "\n",
        "        #add ReLU layer\n",
        "        model.add(LeakyReLU(alpha=0.2))\n",
        "\n",
        "        #add global sum pooling layer (is sum pooling the same as average pooling?) - also what parameters to be added here?\n",
        "        # model.add(GlobalAveragePooling1D(self.input_shape)) # (batch_size, steps, features)\n",
        "      \n",
        "        model.add(Flatten())\n",
        "\n",
        "        img = Input(shape=self.img_shape)\n",
        "        validity = model(img)\n",
        "\n",
        "        return Model(img, validity) #validity as output\n",
        "\n",
        "    def train(self, X_train , epochs, batch_size=128, sample_interval=50, ):\n",
        "\n",
        "        # Adversarial ground truths\n",
        "        valid = np.ones((batch_size, 1))\n",
        "        fake = np.zeros((batch_size, 1))\n",
        "\n",
        "        for epoch in range(epochs):\n",
        "\n",
        "            # ---------------------\n",
        "            #  Train Discriminator\n",
        "            # ---------------------\n",
        "\n",
        "            # Select a random batch of images\n",
        "            idx = np.random.randint(0, X_train.shape[0], batch_size)\n",
        "            imgs = X_train[idx]\n",
        "\n",
        "            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))\n",
        "\n",
        "            # Generate a batch of new images\n",
        "            gen_imgs = self.generator.predict(noise)\n",
        "\n",
        "            # Train the discriminator\n",
        "            d_loss_real = self.discriminator.train_on_batch(imgs, valid)\n",
        "            d_loss_fake = self.discriminator.train_on_batch(gen_imgs, fake)\n",
        "            d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)\n",
        "\n",
        "            # ---------------------\n",
        "            #  Train Generator\n",
        "            # ---------------------\n",
        "\n",
        "            noise = np.random.normal(0, 1, (batch_size, self.latent_dim))\n",
        "            valid_y = np.array([1] * batch_size)\n",
        "            # Train the generator (to have the discriminator label samples as valid)\n",
        "            #combines the network for the generator & discriminator, but not training discriminator part\n",
        "            g_loss = self.combined.train_on_batch(noise, valid_y) \n",
        "\n",
        "            # Plot the progress\n",
        "            print (\"%d [D loss: %f, acc.: %.2f%%] [G loss: %f]\" % (epoch, d_loss[0], 100*d_loss[1], g_loss))\n",
        "\n",
        "            # If at save interval => save generated image samples\n",
        "            if epoch % sample_interval == 0:\n",
        "                self.sample_images(epoch)\n",
        "\n",
        "    def sample_images(self, epoch):\n",
        "        r, c = 5, 5\n",
        "        noise = np.random.normal(0, 1, (r * c, self.latent_dim))\n",
        "        gen_imgs = self.generator.predict(noise)\n",
        "\n",
        "        # Rescale images 0 - 1\n",
        "        gen_imgs = 0.5 * gen_imgs + 0.5\n",
        "\n",
        "        fig, axs = plt.subplots(r, c)\n",
        "        cnt = 0\n",
        "        for i in range(r):\n",
        "            for j in range(c):\n",
        "                axs[i,j].imshow(gen_imgs[cnt, :,:,0], cmap='gray')\n",
        "                axs[i,j].axis('off')\n",
        "                cnt += 1\n",
        "        fig.savefig(\"images/%d.png\" % epoch)\n",
        "        plt.close()\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    gan = GAN()\n",
        "    gan.train(images,epochs=100, batch_size=32, sample_interval=200)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_2\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense (Dense)                (None, 256)               25856     \n",
            "_________________________________________________________________\n",
            "leaky_re_lu_18 (LeakyReLU)   (None, 256)               0         \n",
            "_________________________________________________________________\n",
            "batch_normalization (BatchNo (None, 256)               1024      \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 512)               131584    \n",
            "_________________________________________________________________\n",
            "leaky_re_lu_19 (LeakyReLU)   (None, 512)               0         \n",
            "_________________________________________________________________\n",
            "batch_normalization_1 (Batch (None, 512)               2048      \n",
            "_________________________________________________________________\n",
            "dense_2 (Dense)              (None, 1024)              525312    \n",
            "_________________________________________________________________\n",
            "leaky_re_lu_20 (LeakyReLU)   (None, 1024)              0         \n",
            "_________________________________________________________________\n",
            "batch_normalization_2 (Batch (None, 1024)              4096      \n",
            "_________________________________________________________________\n",
            "dense_3 (Dense)              (None, 49152)             50380800  \n",
            "_________________________________________________________________\n",
            "reshape (Reshape)            (None, 128, 128, 3)       0         \n",
            "=================================================================\n",
            "Total params: 51,070,720\n",
            "Trainable params: 51,067,136\n",
            "Non-trainable params: 3,584\n",
            "_________________________________________________________________\n",
            "0 [D loss: 5.732411, acc.: 0.00%] [G loss: 10.376823]\n",
            "1 [D loss: 5.026593, acc.: 0.00%] [G loss: 9.505965]\n",
            "2 [D loss: 4.644336, acc.: 0.00%] [G loss: 9.062478]\n",
            "3 [D loss: 4.311419, acc.: 0.00%] [G loss: 8.679253]\n",
            "4 [D loss: 4.042976, acc.: 0.00%] [G loss: 8.503472]\n",
            "5 [D loss: 3.979061, acc.: 0.00%] [G loss: 8.268574]\n",
            "6 [D loss: 3.870656, acc.: 0.00%] [G loss: 8.063423]\n",
            "7 [D loss: 3.676396, acc.: 0.00%] [G loss: 7.897077]\n",
            "8 [D loss: 3.548516, acc.: 0.00%] [G loss: 7.759085]\n",
            "9 [D loss: 3.441964, acc.: 0.00%] [G loss: 7.596519]\n",
            "10 [D loss: 3.346901, acc.: 0.00%] [G loss: 7.451098]\n",
            "11 [D loss: 3.241379, acc.: 0.00%] [G loss: 7.289748]\n",
            "12 [D loss: 3.133720, acc.: 0.00%] [G loss: 7.130099]\n",
            "13 [D loss: 3.021805, acc.: 0.00%] [G loss: 6.984422]\n",
            "14 [D loss: 2.937670, acc.: 0.00%] [G loss: 6.842009]\n",
            "15 [D loss: 2.851929, acc.: 0.00%] [G loss: 6.694261]\n",
            "16 [D loss: 2.777908, acc.: 0.00%] [G loss: 6.526474]\n",
            "17 [D loss: 2.667618, acc.: 0.00%] [G loss: 6.371083]\n",
            "18 [D loss: 2.589517, acc.: 0.00%] [G loss: 6.223207]\n",
            "19 [D loss: 2.501906, acc.: 0.00%] [G loss: 6.074830]\n",
            "20 [D loss: 2.433415, acc.: 0.00%] [G loss: 5.932559]\n",
            "21 [D loss: 2.351473, acc.: 0.00%] [G loss: 5.788130]\n",
            "22 [D loss: 2.287191, acc.: 0.00%] [G loss: 5.650037]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-068c481c2cfd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    176\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'__main__'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    177\u001b[0m     \u001b[0mgan\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGAN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 178\u001b[0;31m     \u001b[0mgan\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m32\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_interval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m200\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-9-068c481c2cfd>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, X_train, epochs, batch_size, sample_interval)\u001b[0m\n\u001b[1;32m    146\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    147\u001b[0m             \u001b[0;31m# Train the generator (to have the discriminator label samples as valid)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 148\u001b[0;31m             \u001b[0mg_loss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcombined\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_on_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnoise\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    149\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m             \u001b[0;31m# Plot the progress\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight, reset_metrics, return_dict)\u001b[0m\n\u001b[1;32m   1725\u001b[0m                                                     class_weight)\n\u001b[1;32m   1726\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmake_train_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1727\u001b[0;31m       \u001b[0mlogs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1728\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1729\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreset_metrics\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    826\u001b[0m     \u001b[0mtracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    827\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mtrace\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTrace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mtm\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 828\u001b[0;31m       \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    829\u001b[0m       \u001b[0mcompiler\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"xla\"\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_experimental_compile\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m\"nonXla\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    830\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    853\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    854\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 855\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    856\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    857\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   2941\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   2942\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 2943\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   2944\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2945\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1917\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1918\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1919\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1920\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1921\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    558\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    559\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 560\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    561\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    562\u001b[0m           outputs = execute.execute_with_cancellation(\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 60\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     61\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vC-Fvo3htXll"
      },
      "source": [
        "#discriminator would use a resnet architecture\n",
        "#how to build a resnet as a discriminator\n",
        "#what are the parameters that they've used for the ResNet?\n",
        "#will start here by building the resnet\n",
        "#--------> I'll continue working in the discriminator.py file\n",
        "\n",
        "\n",
        "def rotate_img(img, rot):\n",
        "  if rot == 0:  # 0 degrees rotation\n",
        "    return img\n",
        "  elif rot == 90:\n",
        "    return np.rot90(img,k=1, axes=(1,2))\n",
        "  elif rot == 180:\n",
        "    return np.rot90(img,k=2, axes=(1,2))\n",
        "  elif rot == 270:\n",
        "    return np.rot90(img,k=3, axes=(1,2))\n",
        "  else:\n",
        "    raise ValueError(\"rotation not valid\")\n",
        " \n",
        "\n",
        "def train_epoch(X, y ):\n",
        "  assert len(X) == len(y)\n",
        "  for i ,data in enumerate(X):\n",
        "    # Get generated data from generator\n",
        "    # x = generated_data\n",
        "    # x_90 = rotate_img(x, 90)\n",
        "    # x_180 = rotate_img(x, 180)\n",
        "    # x_270 = rotate_img(x, 270)\n",
        "\n",
        "\n",
        "    x = data\n",
        "    x_90 = rotate_img(x, 90)\n",
        "    x_180 = rotate_img(x, 180)\n",
        "    x_270 = rotate_img(x, 270)\n",
        "    new_image = np.vstack(x, x_90, x_180, x_270)\n",
        "\n",
        "  return new_image\n",
        "\n",
        "# train_data_gen = get_data_generator(X_train, y_train)\n",
        "# test_data_gen = get_data_generator(X_test, y_test)\n",
        "\n",
        "# print(model.evaluate_generator(train_data_gen))\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yuqUm0NHCmOD"
      },
      "source": [
        "# #discriminator.py\n",
        "# from keras.datasets import mnist #for testing on some data\n",
        "# from keras.layers import Input, Dense, Reshape, Flatten, Dropout, ReLU, AveragePooling2D\n",
        "# from keras.layers import BatchNormalization, Activation, ZeroPadding2D, GlobalAveragePooling1D\n",
        "\n",
        "# from keras.layers.advanced_activations import LeakyReLU\n",
        "# from keras.models import Sequential, Model\n",
        "# from keras.optimizers import Adam\n",
        "# from keras.layers.convolutional import UpSampling2D, Conv2D\n",
        "# import matplotlib.pyplot as plt\n",
        "# import sys\n",
        "# import numpy as np\n",
        "# from scipy import ndimage\n",
        "# from keras.backend import sum\n",
        "\n",
        "\n",
        "# #losses: rotation loss & hinge loss (for the true versus fake prediction)\n",
        "# #penalties (such as the gradient penalty)\n",
        "# #normalization techniques: self-modulated batch normalization which doesnt require labels\n",
        "# #neural architecture: ResNet\n",
        "# #evaluation metrics: FID score\n",
        "# #ResNet contains 6 blocks\n",
        "# #I'm assuming that we will have a GAN class and inside that class we'll have the discriminator and generator functions\n",
        "\n",
        "# class Discriminator():\n",
        "  \n",
        "#   # def __init__(self, flags, data):\n",
        "#   def __init__(self):\n",
        "#     self.resnet = None\n",
        "#     self.lrelu = None\n",
        "#     self.sn  = None\n",
        "#     # self.input_shape = (28, 28, 1) \n",
        "#     self.img_shape = (128, 128, 3)\n",
        "#     self.model = None\n",
        "\n",
        "#   #discriminator outputs likelihood of image being real\n",
        "#   # def discriminator(self, resnet):\n",
        "#   def define_model(self):  \n",
        "#      #as per paper batch normalization is omitted in the discriminator\n",
        "#      #leakyRelu / conv / leakyrelu / conv\n",
        "#      #4 resblocks --> relu, global sum pooling, dense \n",
        "\n",
        "#       model = Sequential()\n",
        "#       channel = 3\n",
        "#       # Conv1D(filters=32, kernel_size=8, input_shape=(5000,1), strides=1, padding='same')\n",
        "#       #nn.Conv1d(in_channels=1, out_channels=32, kernel_size=7, stride=1, padding=3) # different kernel size\n",
        "\n",
        "#       #block1 3, 128 , down_sampling = True, is_start = True\n",
        "#       model.add( Conv2D(128, kernel_size=3, strides=1 ,input_shape=self.img_shape, padding=\"same\"))\n",
        "#       model.add(ReLU())\n",
        "#       model.add(Conv2D(128, kernel_size=3, strides=1, padding=\"same\"))\n",
        "#       model.add(ReLU())\n",
        "#       model.add(AveragePooling2D(2,2))\n",
        "#       # AvgPool2d(2, 2, padding = 1) kernel, stride\n",
        "\n",
        "#       #block2 down_sampling = True,\n",
        "#       model.add(ReLU()) \n",
        "#       model.add(Conv2D(128, kernel_size=3, strides=1, padding=\"same\"))\n",
        "#       model.add(ReLU())\n",
        "#       model.add(Conv2D(128, kernel_size=3, strides=1, padding=\"same\"))\n",
        "#       model.add(AveragePooling2D(2,2))\n",
        "      \n",
        "#       #block3\n",
        "#       model.add(ReLU())\n",
        "#       model.add(Conv2D(128, kernel_size=3, strides=1,  padding=\"same\"))\n",
        "#       model.add(ReLU())\n",
        "#       model.add(Conv2D(128, kernel_size=3, strides=1, padding=\"same\"))\n",
        "\n",
        "#       #block4\n",
        "#       model.add(ReLU())\n",
        "#       model.add(Conv2D(128, kernel_size=3, strides=1, padding=\"same\"))\n",
        "#       model.add(ReLU())\n",
        "#       model.add(Conv2D(128, kernel_size=3, strides=1, padding=\"same\"))\n",
        "\n",
        "#       #add ReLU layer\n",
        "#       model.add(ReLU())\n",
        "\n",
        "#        #add global sum pooling layer (is sum pooling the same as average pooling?) - also what parameters to be added here?\n",
        "#       # torch.sum(block4, dim=(2,3))\n",
        "#       # sum()\n",
        "#       # model.add(GlobalAveragePooling1D(self.input_shape)) # (batch_size, steps, features)\n",
        "      \n",
        "#       # linear(128, 1)\n",
        "#       model.add(Dense(1))\n",
        "\n",
        "#       lr = 1e-4\n",
        "#       betas = (.9, .99)\n",
        "#       opt = Adam(learning_rate=lr, beta_1= betas[0], beta_2=betas[1])\n",
        "#       model.compile(loss=\"binary_crossentropy\", optimizer=opt)\n",
        "      \n",
        "#       self.model = model\n",
        "#       return self.model\n",
        "\n",
        "#   def train(self, epochs, batch_size=128, save_interval=500):\n",
        "#     # #load real images\n",
        "#     # (X_train,_), (Y_train,_) = mnist.load_data() #we're not gonna use Y_train but it bothers me to leave it out\n",
        "\n",
        "#     # #normalize data (-1 to 1) \n",
        "#     # #if you want to do 0 to 1 change 127.5 to 255\n",
        "#     # # X_train = (X_train.astype(np.float32)-127.5) /127.5\n",
        "#     # # X_train = X_train.astype(np.float32)/255\n",
        "#     # #add dimension, if input to gen and discr has shape 28x28x1, then 3 dimensions\n",
        "#     # X_train = np.expand_dims(X_train, axis=3)\n",
        "#     # half_size = int(batch_size/2)\n",
        "\n",
        "#     # for epoch in range(epochs)\n",
        "#     #     idx = np.random.randint(0, X_train.shape[0], half_size)\n",
        "#     #     imgs = X_train[idx]\n",
        "\n",
        "#     #     #half batch number of vectors, each of size 100\n",
        "#     #     noise = np.random.normal(0,1,(half_size, 100)) #for generator\n",
        "#     #     #generate half batch of fake images\n",
        "#     #     gen_imgs = generator.predict(noise)\n",
        "\n",
        "#     #     ########################\n",
        "#     #     #Training Discriminator#\n",
        "#     #     ########################\n",
        "#     #     #train discriminator on real images\n",
        "#     #     d_loss_real = discriminator.train_on_batch(imgs, np.ones((half_batch, 1)))\n",
        "#     #     #train discriminator on fake images\n",
        "#     #     d_loss_fake = discriminator.train_on_batch(gen_imgs, np.zeros((half_size,1)))\n",
        "#     #     #averaged loss\n",
        "#     #     d_loss = 0.5 * np.add(d_loss_real, d_loss_fake) #add and divide by 2\n",
        "\n",
        "\n",
        "#     #     ########################\n",
        "#     #     ###Training Generator###\n",
        "#     #     ########################\n",
        "#     #     #generating fake images\n",
        "#     #     noise = np.random.normal(0,1,(batch_size, 100)) \n",
        "#     #     #telling discriminator the image is real\n",
        "#     #     valid_y = np.array([1] * batch_size)\n",
        "\n",
        "#     #     g_loss = combined.train_on_batch(noise, valid_y)\n",
        "#       pass\n",
        "\n",
        "#   #function to predict whether an image is real or fake \n",
        "#   def predict_real_fake():\n",
        "#     pass\n",
        "\n",
        "#   #function to predict what rotation angle we're working with\n",
        "#   def rotation_angle():\n",
        "#     pass\n"
      ],
      "execution_count": null,
      "outputs": []
    }
   ],
   "source": [
    "noise = np.random.normal(0,1,(2, 100)) \n",
    "print(len(noise))\n",
    "gen_imgs = gan.generator.predict(noise)\n",
    "gen_imgs = 127.5 * (gen_imgs + 1)\n",
    "\n",
    "for i in range(2):\n",
    "    ax = plt.subplot(1, 2, i+1)\n",
    "    plt.imshow(gen_imgs[i].astype('uint8'))\n",
    "#     Image.fromarray(gen_imgs[i])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#save model here"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyMaRRSBl1ywQSy88Gjbnb6u",
   "collapsed_sections": [],
   "include_colab_link": true,
   "name": "Discriminator.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3.9.4 64-bit",
   "language": "python",
   "name": "python39464bit685e0758a94c4aee86746fae8254c9da"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
